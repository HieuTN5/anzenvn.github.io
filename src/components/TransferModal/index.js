import React, { memo, useState, useEffect } from 'react';
import { Modal, Form, Input, Typography, Tabs, Tag, Button, Skeleton } from 'antd';
import { addCommaThousand, getCookie } from '@/utils/utils';
import { notifyInstant } from '@/utils/notification';
import InputNumberOnly from '../InputNumberOnly';
import styles from './styles.less';
import { COOKIE_NAMES } from '@/utils/constants';

const { Title } = Typography;

const TRANSFER_STEP = {
  INPUT: '1',
  AUTHEN: '2',
};

const { TabPane } = Tabs;

const TransferModal = (props) => {
  const {
    isVisible,
    setVisible,
    isLoadingGetAvailableBalance,
    availableBalance,
    onTransfer,
    isLoadingTransferToAnother,
  } = props;
  const [form] = Form.useForm();

  const [stepTransfer, setStepTransfer] = useState(TRANSFER_STEP.INPUT);

  const calPercentBalance = (percent) => {
    const balance = availableBalance.balance || 0.0;
    let result = (balance * percent) / 100;
    if (result < 2) {
      result = 2;
      notifyInstant.warning('Minimum transfer amount is 2 BET');
    }
    form.setFieldsValue({ amount: result });
  };

  const using2fa = JSON.parse(getCookie(COOKIE_NAMES.USING_2FA));

  const onSubmitTransfer = (values) => {
    if (stepTransfer === TRANSFER_STEP.INPUT && using2fa) {
      setStepTransfer(TRANSFER_STEP.AUTHEN);
    } else {
      const payload = { values, callback: onCloseModal };
      onTransfer(payload);
    }
  };

  const onCloseModal = () => {
    setStepTransfer(TRANSFER_STEP.INPUT);
    form.resetFields();
    setVisible(false);
  };

  return (
    <Modal visible={isVisible} onCancel={onCloseModal} width={672} footer={null} destroyOnClose>
      <div className={styles.wrapFrom}>
        <Form
          name="transfer"
          layout="vertical"
          size="large"
          autoComplete="off"
          form={form}
          onFinish={onSubmitTransfer}
        >
          <Tabs animated activeKey={stepTransfer} onChange={(key) => setStepTransfer(key)}>
            <TabPane key={TRANSFER_STEP.INPUT}>
              <div className={styles.transferContainer}>
                <h2>TRANSFER</h2>
              </div>
              <div className={styles.balanceWrap}>
                <p>BET balance:</p>
                <span>
                  {isLoadingGetAvailableBalance ? (
                    <Skeleton.Input shape="square" style={{ width: 60 }} active size="small" />
                  ) : (
                    addCommaThousand(availableBalance.balance)
                  )}{' '}
                  BET
                </span>
              </div>
              <div className={styles.dGrid}>
                <Form.Item
                  name="amount"
                  rules={[{ required: true, message: 'Please input transfer amount' }]}
                  extra={
                    <div className={styles.tagMax}>
                      <Tag color="#ffbd2f" onClick={() => calPercentBalance(100)}>
                        100%
                      </Tag>
                      <Tag color="#ffbd2f" onClick={() => calPercentBalance(50)}>
                        50%
                      </Tag>
                      <Tag color="#ffbd2f" onClick={() => calPercentBalance(20)}>
                        20%
                      </Tag>
                    </div>
                  }
                >
                  <InputNumberOnly
                    name="amount"
                    inputProps={{
                      placeholder: 'Enter Transfer Amount',
                      autoComplete: 'false',
                      precision: 2,
                      min: 2,
                      autoFocus: true,
                    }}
                    noStyle
                  />
                </Form.Item>
              </div>

              <Form.Item
                name="receiver"
                rules={[{ required: true, message: 'Please input your userName!' }]}
              >
                <Input placeholder="Username receiver" />
              </Form.Item>

              <Form.Item>
                <Button type="primary" htmlType="submit" loading={isLoadingTransferToAnother}>
                  Transfer
                </Button>
              </Form.Item>

              <div className={styles.minimum}>
                <p>
                  Minimum transfer amount: <span>2 BET</span>
                </p>
              </div>
            </TabPane>
            <TabPane key={TRANSFER_STEP.AUTHEN}>
              <div className={styles.transferContainer}>
                <h2>AUTHENTICATION</h2>
              </div>
              <div className={styles.balanceWrap}>
                <p>Enter the code generated by your authenticator app</p>
              </div>
              <Form.Item
                name="code2fa"
                rules={[
                  { required: true, message: 'Please input two-factor authentication code!' },
                ]}
              >
                <Input placeholder="Two-factor authentication" />
              </Form.Item>

              <Form.Item>
                <Button type="primary" htmlType="submit" loading={isLoadingTransferToAnother}>
                  Verify
                </Button>
              </Form.Item>
            </TabPane>
          </Tabs>
        </Form>
      </div>
    </Modal>
  );
};

export default memo(TransferModal);
